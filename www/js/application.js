if (device.desktop()) {
  window.Tapcentive = angular.module('Tapcentive', ['ui.router', 'btford.socket-io']);
} else {
  window.Tapcentive = angular.module("Tapcentive", ["ionic", "btford.socket-io", "tap.controllers"]).run(function($ionicPlatform) {
    return $ionicPlatform.ready(function() {
      if (window.StatusBar) {
        return StatusBar.styleDefault();
      }
    });
  });
}

Tapcentive.config(function($stateProvider, $urlRouterProvider, $locationProvider, $httpProvider) {
  $stateProvider.state('pages', {
    url: '/',
    controller: 'HomeCtrl',
    views: {
      menuContent: {
        templateUrl: 'home.html'
      }
    }
  }).state('docs', {
    url: '/docs',
    controller: 'DocsCtrl',
    templateUrl: 'docs/index.html'
  }).state('app', {
    url: '/',
    abstract: true,
    controller: 'AppCtrl',
    templateUrl: 'menu.html'
  }).state('about', {
    url: '/about',
    controller: 'AboutCtrl',
    templateUrl: 'about.html'
  }).state('how', {
    url: '/how',
    controller: 'HowCtrl',
    templateUrl: 'how.html'
  }).state('platform-touchpoints', {
    url: '/beacon-ble-nfc-connected-touchpoint',
    controller: 'PlatformTouchpointCtrl',
    templateUrl: 'platform-touchpoints.html'
  }).state('platform-mobile', {
    url: '/beacon-ble-nfc-mobile-api-sdk',
    controller: 'PlatformMobileCtrl',
    templateUrl: 'platform-mobile.html'
  }).state('platform-manager', {
    url: '/tapcentive-beacon-nfc-cloud-manager',
    controller: 'PlatformManagerCtrl',
    templateUrl: 'platform-manager.html'
  }).state('blog', {
    url: '/blog',
    controller: 'BlogCtrl',
    templateUrl: 'blog.html'
  }).state('press', {
    url: '/press',
    controller: 'PressCtrl',
    templateUrl: 'press.html'
  }).state('contact', {
    url: '/contact',
    controller: 'ContactCtrl',
    templateUrl: 'contact.html'
  }).state('doc', {
    url: '/docs/:permalink',
    controller: 'DocCtrl',
    templateUrl: 'docs/show.html'
  }).state('step', {
    url: '/docs/:permalink/:step',
    controller: 'DocCtrl',
    templateUrl: 'docs/show.html'
  });
  $urlRouterProvider.otherwise("/");
  return $httpProvider.interceptors.push(function() {
    return {
      request: function(config) {
        var type;
        if (config.url.match(/\.html$/)) {
          if (device.tablet()) {
            type = 'tablet';
          } else if (device.mobile()) {
            type = 'mobile';
          } else {
            type = 'desktop';
          }
          config.url = "/" + type + "/" + config.url;
        }
        return config;
      }
    };
  });
});

Tapcentive.run(function($state) {
  return $state.go('docs');
});

Tapcentive.factory('Socket', function(socketFactory) {
  return socketFactory();
});

Tapcentive.factory('Docs', function(Socket) {
  var service;
  service = {
    list: [],
    find: function(permalink) {
      return _.find(service.list, function(doc) {
        return doc.permalink === permalink;
      });
    }
  };
  Socket.on('docs', function(docs) {
    return service.list = docs;
  });
  return service;
});

Tapcentive.controller('HomeCtrl', function($scope) {});

Tapcentive.controller('AboutCtrl', function($scope) {});

Tapcentive.controller('HowCtrl', function($scope) {});

Tapcentive.controller('AppCtrl', function($scope) {});

Tapcentive.controller('PlatformManagerCtrl', function($scope) {});

Tapcentive.controller('PlatformTouchpointCtrl', function($scope) {});

Tapcentive.controller('PlatformMobileCtrl', function($scope) {});

Tapcentive.controller('PressCtrl', function($scope) {});

Tapcentive.controller('ContactCtrl', function($scope) {});

Tapcentive.controller('GetStartedCtrl', function($scope) {});

Tapcentive.controller('DevelopersCtrl', function($scope) {});

Tapcentive.controller('DeveloperCenterCtrl', function($scope) {});

Tapcentive.controller('DocsCtrl', function($scope, Docs) {
  return $scope.$watch((function() {
    return Docs.list;
  }), function() {
    return $scope.docs = Docs.list;
  });
});

Tapcentive.controller('DocCtrl', function($scope, $sce, $stateParams, $timeout, Docs) {
  $scope.index = $stateParams.step ? $stateParams.step - 1 : 0;
  $scope.$watch((function() {
    return Docs.list;
  }), function() {
    $scope.doc = Docs.find($stateParams.permalink);
    if ($scope.doc) {
      $scope.step = $scope.doc.steps[$scope.index];
      $scope.step.url = $sce.trustAsResourceUrl($scope.step.url);
      if ($scope.step.type === 'dialog') {
        $scope.messageIndex = 0;
        $scope.messages = [];
        return $timeout($scope.nextMessage, 1000);
      }
    }
  });
  return $scope.hasMoreSteps = function() {
    if ($scope.step) {
      return $scope.step.index < $scope.doc.steps.length;
    }
  };
});

angular.module("tap.controllers", []);

angular.module("tap.directives", []).directive("device", function() {
  var directiveDefinitionObject;
  directiveDefinitionObject = {
    restrict: "A",
    link: function() {
      device.init();
    }
  };
  return directiveDefinitionObject;
}).directive("snapscroll", function() {
  var directiveDefinitionObject;
  directiveDefinitionObject = {
    restrict: "A",
    link: function() {
      device.init();
    }
  };
  return directiveDefinitionObject;
});

//# sourceMappingURL=data:application/json;base64,